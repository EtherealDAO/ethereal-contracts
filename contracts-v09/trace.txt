------------------------------Transaction Metadata------------------------------
Transaction hash: 055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c3bef6e93a5b8
Preallocated Node IDs: {}
Number of blobs: 0
------------------------------Engine Execution Log------------------------------
[0] Creating node: id = AuthZoneStack, init = AuthZoneStack(AuthZoneStackSubstate { auth_zones: [] }), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000009], blueprint_name: "AuthZone", global: false })}
[0] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[000000000000000000000000000000000000000000000000000007], blueprint_name: "TransactionProcessor", ident: "run" }), input size = 553
[0] Sending nodes: []
[0] Sending refs: {Global(NormalPackage[000000000000000000000000000000000000000000000000000007]), Global(NonFungibleResource[020000000000000000000000000000000000000000000000000000]), Global(NonFungibleResource[020000000000000000000000000000000000000000000000000003]), Global(NormalPackage[00489a9c3ded719b7e96bc571bf684a94b1a27cb1a5131391c989d]), Global(FungibleResource[010000000000000000000000000000000000000000000000000000]), Global(AccountComponent[048e6dff880ca4a73fdfdaa808b1394c524eeef24bf3b3b78985dc]), Global(NonFungibleResource[020000000000000000000000000000000000000000000000000001]), Global(ClockComponent[070000000000000000000000000000000000000000000000000000]), Global(EpochManagerComponent[050000000000000000000000000000000000000000000000000000]), Global(NormalComponent[03ec320a90c7025ad390b44a09614495f5fa0a04e5cebf3281b3d7])}
[0] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000007]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
[0] Substate locked: handle = 0
[0] Writing substate: handle = 0, size = 0
[0] Dropping lock: handle = 0 
[0] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000007]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
[0] Substate locked: handle = 1
[0] Reading substate: handle = 1, size = 0
[0] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
[0] Substate locked: handle = 2
[0] Reading substate: handle = 2, size = 0
[0] Dropping lock: handle = 2 
[0] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
[0] Substate locked: handle = 3
[0] Writing substate: handle = 3, size = 0
[0] Dropping lock: handle = 3 
    [1] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c00000000"), init = Object({Worktop(Worktop): Worktop(WorktopSubstate { resources: {} })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "Worktop", global: false })}
    [1] Invoking: fn = Method(MethodIdentifier(Global(NormalComponent[03ec320a90c7025ad390b44a09614495f5fa0a04e5cebf3281b3d7]), SELF, "lock_fee")), input size = 44
    [1] Locking substate: node id = Global(NormalComponent[03ec320a90c7025ad390b44a09614495f5fa0a04e5cebf3281b3d7]), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
    [1] Substate locked: handle = 0
    [1] Reading substate: handle = 0, size = 0
    [1] Dropping lock: handle = 0 
    [1] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000040]), module_id = SELF, offset = Package(CodeType), flags = (empty)
    [1] Substate locked: handle = 1
    [1] Reading substate: handle = 1, size = 0
    [1] Dropping lock: handle = 1 
    [1] Sending nodes: []
    [1] Sending refs: {Global(EpochManagerComponent[050000000000000000000000000000000000000000000000000000]), Global(NonFungibleResource[020000000000000000000000000000000000000000000000000003]), Global(ClockComponent[070000000000000000000000000000000000000000000000000000]), Global(NormalComponent[03ec320a90c7025ad390b44a09614495f5fa0a04e5cebf3281b3d7]), Global(NonFungibleResource[020000000000000000000000000000000000000000000000000000]), Global(NonFungibleResource[020000000000000000000000000000000000000000000000000001]), Global(FungibleResource[010000000000000000000000000000000000000000000000000000]), Global(NormalPackage[000000000000000000000000000000000000000000000000000040])}
    [1] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000040]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
    [1] Substate locked: handle = 2
    [1] Writing substate: handle = 2, size = 0
    [1] Dropping lock: handle = 2 
    [1] Locking substate: node id = Global(NormalComponent[03ec320a90c7025ad390b44a09614495f5fa0a04e5cebf3281b3d7]), module_id = ComponentRoyalty, offset = Royalty(RoyaltyConfig), flags = (empty)
    [1] Substate locked: handle = 3
    [1] Reading substate: handle = 3, size = 0
    [1] Dropping lock: handle = 3 
    [1] Locking substate: node id = Global(NormalComponent[03ec320a90c7025ad390b44a09614495f5fa0a04e5cebf3281b3d7]), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
    [1] Substate locked: handle = 4
    [1] Reading substate: handle = 4, size = 0
    [1] Dropping lock: handle = 4 
    [1] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000040]), module_id = SELF, offset = Package(Info), flags = (empty)
    [1] Substate locked: handle = 5
    [1] Reading substate: handle = 5, size = 0
    [1] Dropping lock: handle = 5 
    [1] Locking substate: node id = Global(NormalComponent[03ec320a90c7025ad390b44a09614495f5fa0a04e5cebf3281b3d7]), module_id = SELF, offset = Component(State0), flags = (empty)
    [1] Substate locked: handle = 6
    [1] Reading substate: handle = 6, size = 0
    [1] Dropping lock: handle = 6 
    [1] Locking substate: node id = Global(NormalComponent[03ec320a90c7025ad390b44a09614495f5fa0a04e5cebf3281b3d7]), module_id = AccessRules, offset = AccessRules(AccessRules), flags = (empty)
    [1] Substate locked: handle = 7
    [1] Reading substate: handle = 7, size = 0
    [1] Dropping lock: handle = 7 
    [1] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
    [1] Substate locked: handle = 8
    [1] Reading substate: handle = 8, size = 0
    [1] Dropping lock: handle = 8 
    [1] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
    [1] Substate locked: handle = 9
    [1] Writing substate: handle = 9, size = 0
    [1] Dropping lock: handle = 9 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000040]), module_id = SELF, offset = Package(Info), flags = (empty)
        [2] Substate locked: handle = 0
        [2] Dropping lock: handle = 0 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000040]), module_id = SELF, offset = Package(Info), flags = (empty)
        [2] Substate locked: handle = 1
        [2] Reading substate: handle = 1, size = 0
        [2] Dropping lock: handle = 1 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000040]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 2
        [2] Reading substate: handle = 2, size = 0
        [2] Dropping lock: handle = 2 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000040]), module_id = SELF, offset = Package(Code), flags = (empty)
        [2] Substate locked: handle = 3
        [2] Reading substate: handle = 3, size = 0
        [2] Dropping lock: handle = 3 
        [2] Locking substate: node id = Global(NormalComponent[03ec320a90c7025ad390b44a09614495f5fa0a04e5cebf3281b3d7]), module_id = SELF, offset = Component(State0), flags = MUTABLE
        [2] Substate locked: handle = 4
        [2] Reading substate: handle = 4, size = 69
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a320172d000000"), SELF, "lock_fee")), input size = 46
        [2] Locking substate: node id = Object("0e81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a320172d000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 5
        [2] Reading substate: handle = 5, size = 0
        [2] Dropping lock: handle = 5 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 6
        [2] Reading substate: handle = 6, size = 0
        [2] Dropping lock: handle = 6 
        [2] Sending nodes: []
        [2] Sending refs: {Object("0e81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a320172d000000"), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 7
        [2] Writing substate: handle = 7, size = 0
        [2] Dropping lock: handle = 7 
        [2] Locking substate: node id = Object("0e81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a320172d000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 8
        [2] Reading substate: handle = 8, size = 0
        [2] Dropping lock: handle = 8 
        [2] Locking substate: node id = Object("0e81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a320172d000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 9
        [2] Reading substate: handle = 9, size = 0
        [2] Dropping lock: handle = 9 
        [2] Locking substate: node id = Global(FungibleResource[010000000000000000000000000000000000000000000000000000]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 10
        [2] Reading substate: handle = 10, size = 0
        [2] Dropping lock: handle = 10 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 11
        [2] Reading substate: handle = 11, size = 0
        [2] Dropping lock: handle = 11 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 12
        [2] Writing substate: handle = 12, size = 0
        [2] Dropping lock: handle = 12 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a320172d000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Locking substate: node id = Object("0e81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a320172d000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 5
            [3] Reading substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
            [3] Locking substate: node id = Object("0e81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a320172d000000"), module_id = SELF, offset = Vault(LiquidFungible), flags = MUTABLE | UNMODIFIED_BASE | FORCE_WRITE
            [3] Substate locked: handle = 6
            [3] Writing substate: handle = 6, size = 0
            [3] Writing substate: handle = 6, size = 0
            [3] Locking substate: node id = Object("0e81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a320172d000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 7
            [3] Reading substate: handle = 7, size = 0
            [3] Dropping lock: handle = 7 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 8
            [3] Reading substate: handle = 8, size = 0
            [3] Dropping lock: handle = 8 
            [3] Returning nodes: []
            [3] Returning refs: {}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 9
            [3] Writing substate: handle = 9, size = 0
            [3] Dropping lock: handle = 9 
        [2] Exiting: output size = 0
        [2] Locking substate: node id = Global(NormalComponent[03ec320a90c7025ad390b44a09614495f5fa0a04e5cebf3281b3d7]), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 13
        [2] Reading substate: handle = 13, size = 0
        [2] Dropping lock: handle = 13 
        [2] Writing substate: handle = 4, size = 0
        [2] Dropping lock: handle = 4 
        [2] Returning nodes: []
        [2] Returning refs: {}
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 14
        [2] Writing substate: handle = 14, size = 0
        [2] Dropping lock: handle = 14 
    [1] Exiting: output size = 0
    [1] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00489a9c3ded719b7e96bc571bf684a94b1a27cb1a5131391c989d], blueprint_name: "DAO", ident: "from_nothing" }), input size = 72
    [1] Locking substate: node id = Global(NormalPackage[00489a9c3ded719b7e96bc571bf684a94b1a27cb1a5131391c989d]), module_id = SELF, offset = Package(CodeType), flags = (empty)
    [1] Substate locked: handle = 10
    [1] Reading substate: handle = 10, size = 0
    [1] Dropping lock: handle = 10 
    [1] Sending nodes: []
    [1] Sending refs: {Global(ClockComponent[070000000000000000000000000000000000000000000000000000]), Global(NonFungibleResource[020000000000000000000000000000000000000000000000000000]), Global(AccountComponent[048e6dff880ca4a73fdfdaa808b1394c524eeef24bf3b3b78985dc]), Global(EpochManagerComponent[050000000000000000000000000000000000000000000000000000]), Global(NonFungibleResource[020000000000000000000000000000000000000000000000000001]), Global(FungibleResource[010000000000000000000000000000000000000000000000000000]), Global(NonFungibleResource[020000000000000000000000000000000000000000000000000003]), Global(NormalPackage[00489a9c3ded719b7e96bc571bf684a94b1a27cb1a5131391c989d])}
    [1] Locking substate: node id = Global(NormalPackage[00489a9c3ded719b7e96bc571bf684a94b1a27cb1a5131391c989d]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
    [1] Substate locked: handle = 11
    [1] Writing substate: handle = 11, size = 0
    [1] Dropping lock: handle = 11 
    [1] Locking substate: node id = Global(NormalPackage[00489a9c3ded719b7e96bc571bf684a94b1a27cb1a5131391c989d]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
    [1] Substate locked: handle = 12
    [1] Reading substate: handle = 12, size = 0
    [1] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
    [1] Substate locked: handle = 13
    [1] Reading substate: handle = 13, size = 0
    [1] Dropping lock: handle = 13 
    [1] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
    [1] Substate locked: handle = 14
    [1] Writing substate: handle = 14, size = 0
    [1] Dropping lock: handle = 14 
        [2] Locking substate: node id = Global(NormalPackage[00489a9c3ded719b7e96bc571bf684a94b1a27cb1a5131391c989d]), module_id = SELF, offset = Package(Info), flags = (empty)
        [2] Substate locked: handle = 0
        [2] Dropping lock: handle = 0 
        [2] Locking substate: node id = Global(NormalPackage[00489a9c3ded719b7e96bc571bf684a94b1a27cb1a5131391c989d]), module_id = SELF, offset = Package(Info), flags = (empty)
        [2] Substate locked: handle = 1
        [2] Reading substate: handle = 1, size = 0
        [2] Dropping lock: handle = 1 
        [2] Locking substate: node id = Global(NormalPackage[00489a9c3ded719b7e96bc571bf684a94b1a27cb1a5131391c989d]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 2
        [2] Reading substate: handle = 2, size = 0
        [2] Dropping lock: handle = 2 
        [2] Locking substate: node id = Global(NormalPackage[00489a9c3ded719b7e96bc571bf684a94b1a27cb1a5131391c989d]), module_id = SELF, offset = Package(Code), flags = (empty)
        [2] Substate locked: handle = 3
        [2] Reading substate: handle = 3, size = 0
        [2] Dropping lock: handle = 3 
        [2] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "FungibleResourceManager", ident: "create_with_initial_supply" }), input size = 160
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 4
        [2] Reading substate: handle = 4, size = 0
        [2] Dropping lock: handle = 4 
        [2] Sending nodes: []
        [2] Sending refs: {Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 5
        [2] Writing substate: handle = 5, size = 0
        [2] Dropping lock: handle = 5 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
        [2] Substate locked: handle = 6
        [2] Reading substate: handle = 6, size = 0
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 7
        [2] Reading substate: handle = 7, size = 0
        [2] Dropping lock: handle = 7 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 8
        [2] Writing substate: handle = 8, size = 0
        [2] Dropping lock: handle = 8 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c01000000"), init = Object({ResourceManager(ResourceManager): ResourceManager(FungibleResourceManagerSubstate { resource_address: FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d], divisibility: 18, total_supply: 1 })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "FungibleResourceManager", global: false })}
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 5
            [3] Reading substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
            [3] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000"), init = Object({Bucket(Info): BucketInfo(BucketInfoSubstate { resource_address: FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d], resource_type: Fungible { divisibility: 18 } }), Bucket(LiquidFungible): BucketLiquidFungible(LiquidFungibleResource { amount: 1 }), Bucket(LockedFungible): BucketLockedFungible(LockedFungibleResource { amounts: {} }), Bucket(LiquidNonFungible): BucketLiquidNonFungible(LiquidNonFungibleResource { ids: {} }), Bucket(LockedNonFungible): BucketLockedNonFungible(LockedNonFungibleResource { ids: {} })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "Bucket", global: false })}
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", ident: "create" }), input size = 598
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 6
            [3] Reading substate: handle = 6, size = 0
            [3] Dropping lock: handle = 6 
            [3] Sending nodes: []
            [3] Sending refs: {Global(NormalPackage[00000000000000000000000000000000000000000000000000000c])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 7
            [3] Writing substate: handle = 7, size = 0
            [3] Dropping lock: handle = 7 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 8
            [3] Reading substate: handle = 8, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 9
            [3] Reading substate: handle = 9, size = 0
            [3] Dropping lock: handle = 9 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c03000000"), init = Object({AccessRules(AccessRules): MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "burn" }: AccessRule(DenyAll), MethodKey { node_module_id: SELF, ident: "create_bucket" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_vault" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_type" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_total_supply" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "mint" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "mint_uuid" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "set" }: AccessRule(DenyAll)}, grouped_auth: {"mint": DenyAll}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "burn" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_bucket" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_vault" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_type" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_total_supply" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint_uuid" }: DenyAll, MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: DenyAll, MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "set" }: DenyAll}, grouped_auth_mutability: {"mint": DenyAll}, default_auth_mutability: DenyAll } })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", global: false })}
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c03000000")]
                [4] Returning refs: {}
            [3] Exiting: output size = 0
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", ident: "create" }), input size = 853
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 10
            [3] Reading substate: handle = 10, size = 0
            [3] Dropping lock: handle = 10 
            [3] Sending nodes: []
            [3] Sending refs: {Global(NormalPackage[00000000000000000000000000000000000000000000000000000c])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 11
            [3] Writing substate: handle = 11, size = 0
            [3] Dropping lock: handle = 11 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 12
            [3] Reading substate: handle = 12, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 13
            [3] Reading substate: handle = 13, size = 0
            [3] Dropping lock: handle = 13 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c04000000"), init = Object({AccessRules(AccessRules): MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_address" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "lock_fee" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "put" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "take" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: Group("withdraw"), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll)}, grouped_auth: {"recall": DenyAll, "withdraw": AllowAll}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_address" }: DenyAll, MethodKey { node_module_id: SELF, ident: "lock_fee" }: DenyAll, MethodKey { node_module_id: SELF, ident: "put" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll}, grouped_auth_mutability: {"recall": DenyAll, "withdraw": DenyAll}, default_auth_mutability: DenyAll } })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", global: false })}
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c04000000")]
                [4] Returning refs: {}
            [3] Exiting: output size = 0
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000a], blueprint_name: "Metadata", ident: "create_with_data" }), input size = 78
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 14
            [3] Reading substate: handle = 14, size = 0
            [3] Dropping lock: handle = 14 
            [3] Sending nodes: []
            [3] Sending refs: {Global(NormalPackage[00000000000000000000000000000000000000000000000000000a])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 15
            [3] Writing substate: handle = 15, size = 0
            [3] Dropping lock: handle = 15 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 16
            [3] Reading substate: handle = 16, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 17
            [3] Reading substate: handle = 17, size = 0
            [3] Dropping lock: handle = 17 
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 18
            [3] Writing substate: handle = 18, size = 0
            [3] Dropping lock: handle = 18 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c05000000"), init = Object({}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000a], blueprint_name: "Metadata", global: false })}
                [4] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c05000000"), module_id = SELF, offset = KeyValueStore(Entry([92, 12, 4, 110, 97, 109, 101])), flags = MUTABLE
                [4] Substate locked: handle = 5
                [4] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c05000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
                [4] Substate locked: handle = 6
                [4] Reading substate: handle = 6, size = 0
                [4] Dropping lock: handle = 6 
                [4] Writing substate: handle = 5, size = 0
                [4] Dropping lock: handle = 5 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 7
                [4] Reading substate: handle = 7, size = 0
                [4] Dropping lock: handle = 7 
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c05000000")]
                [4] Returning refs: {}
                [4] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
                [4] Substate locked: handle = 8
                [4] Writing substate: handle = 8, size = 0
                [4] Dropping lock: handle = 8 
            [3] Exiting: output size = 0
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000b], blueprint_name: "ComponentRoyalty", ident: "create" }), input size = 62
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 19
            [3] Reading substate: handle = 19, size = 0
            [3] Dropping lock: handle = 19 
            [3] Sending nodes: []
            [3] Sending refs: {Global(NormalPackage[00000000000000000000000000000000000000000000000000000b])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 20
            [3] Writing substate: handle = 20, size = 0
            [3] Dropping lock: handle = 20 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 21
            [3] Reading substate: handle = 21, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 22
            [3] Reading substate: handle = 22, size = 0
            [3] Dropping lock: handle = 22 
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 23
            [3] Writing substate: handle = 23, size = 0
            [3] Dropping lock: handle = 23 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c06000000"), init = Object({Royalty(RoyaltyConfig): ComponentRoyaltyConfig(ComponentRoyaltyConfigSubstate { royalty_config: RoyaltyConfig { rules: {}, default_rule: 0 } }), Royalty(RoyaltyAccumulator): ComponentRoyaltyAccumulator(ComponentRoyaltyAccumulatorSubstate { royalty_vault: None })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000b], blueprint_name: "ComponentRoyalty", global: false })}
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c06000000")]
                [4] Returning refs: {}
                [4] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
                [4] Substate locked: handle = 5
                [4] Writing substate: handle = 5, size = 0
                [4] Dropping lock: handle = 5 
            [3] Exiting: output size = 0
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c01000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c01000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 24
            [3] Reading substate: handle = 24, size = 0
            [3] Dropping lock: handle = 24 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c05000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 25
            [3] Reading substate: handle = 25, size = 0
            [3] Dropping lock: handle = 25 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c05000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c05000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 26
            [3] Reading substate: handle = 26, size = 0
            [3] Dropping lock: handle = 26 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c03000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 27
            [3] Reading substate: handle = 27, size = 0
            [3] Dropping lock: handle = 27 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c03000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c03000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 28
            [3] Reading substate: handle = 28, size = 0
            [3] Dropping lock: handle = 28 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c04000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 29
            [3] Reading substate: handle = 29, size = 0
            [3] Dropping lock: handle = 29 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c04000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c04000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 30
            [3] Reading substate: handle = 30, size = 0
            [3] Dropping lock: handle = 30 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c06000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 31
            [3] Reading substate: handle = 31, size = 0
            [3] Dropping lock: handle = 31 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c06000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c06000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 32
            [3] Reading substate: handle = 32, size = 0
            [3] Dropping lock: handle = 32 
            [3] Creating node: id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), init = GlobalObject({ResourceManager(ResourceManager): ResourceManager(FungibleResourceManagerSubstate { resource_address: FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d], divisibility: 18, total_supply: 1 })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "FungibleResourceManager", global: true }), Metadata: Metadata({KeyValueStore(Entry([92, 12, 4, 110, 97, 109, 101])): KeyValueStoreEntry(Some(Enum { discriminator: 0, fields: [Enum { discriminator: 0, fields: [String { value: "EDAO SUPERBADGE" }] }] }))}), AccessRules: MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "burn" }: AccessRule(DenyAll), MethodKey { node_module_id: SELF, ident: "create_bucket" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_vault" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_type" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_total_supply" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "mint" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "mint_uuid" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "set" }: AccessRule(DenyAll)}, grouped_auth: {"mint": DenyAll}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "burn" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_bucket" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_vault" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_type" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_total_supply" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint_uuid" }: DenyAll, MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: DenyAll, MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "set" }: DenyAll}, grouped_auth_mutability: {"mint": DenyAll}, default_auth_mutability: DenyAll } }), AccessRules1: MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_address" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "lock_fee" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "put" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "take" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: Group("withdraw"), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll)}, grouped_auth: {"recall": DenyAll, "withdraw": AllowAll}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_address" }: DenyAll, MethodKey { node_module_id: SELF, ident: "lock_fee" }: DenyAll, MethodKey { node_module_id: SELF, ident: "put" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll}, grouped_auth_mutability: {"recall": DenyAll, "withdraw": DenyAll}, default_auth_mutability: DenyAll } }), ComponentRoyalty: ComponentRoyalty(ComponentRoyaltyConfigSubstate { royalty_config: RoyaltyConfig { rules: {}, default_rule: 0 } }, ComponentRoyaltyAccumulatorSubstate { royalty_vault: None })}
            [3] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000")]
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 33
            [3] Writing substate: handle = 33, size = 0
            [3] Dropping lock: handle = 33 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000"), SELF, "Bucket_get_resource_address")), input size = 30
        [2] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 9
        [2] Reading substate: handle = 9, size = 0
        [2] Dropping lock: handle = 9 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 10
        [2] Reading substate: handle = 10, size = 0
        [2] Dropping lock: handle = 10 
        [2] Sending nodes: []
        [2] Sending refs: {Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000"), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 11
        [2] Writing substate: handle = 11, size = 0
        [2] Dropping lock: handle = 11 
        [2] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 12
        [2] Reading substate: handle = 12, size = 0
        [2] Dropping lock: handle = 12 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 13
        [2] Reading substate: handle = 13, size = 0
        [2] Dropping lock: handle = 13 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 14
        [2] Writing substate: handle = 14, size = 0
        [2] Dropping lock: handle = 14 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000"), module_id = SELF, offset = Bucket(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), SELF, "create_vault")), input size = 15
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 15
        [2] Reading substate: handle = 15, size = 0
        [2] Dropping lock: handle = 15 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 16
        [2] Reading substate: handle = 16, size = 0
        [2] Dropping lock: handle = 16 
        [2] Sending nodes: []
        [2] Sending refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 17
        [2] Writing substate: handle = 17, size = 0
        [2] Dropping lock: handle = 17 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 18
        [2] Reading substate: handle = 18, size = 0
        [2] Dropping lock: handle = 18 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 19
        [2] Reading substate: handle = 19, size = 0
        [2] Dropping lock: handle = 19 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 20
        [2] Writing substate: handle = 20, size = 0
        [2] Dropping lock: handle = 20 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = SELF, offset = ResourceManager(ResourceManager), flags = MUTABLE
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 5
            [3] Reading substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
            [3] Creating node: id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), init = Object({Vault(Info): VaultInfo(VaultInfoSubstate { resource_address: FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d], resource_type: Fungible { divisibility: 18 } }), Vault(LiquidFungible): VaultLiquidFungible(LiquidFungibleResource { amount: 0 }), Vault(LockedFungible): VaultLockedFungible(LockedFungibleResource { amounts: {} }), Vault(LiquidNonFungible): VaultLiquidNonFungible(LiquidNonFungibleResource { ids: {} }), Vault(LockedNonFungible): VaultLockedNonFungible(LockedNonFungibleResource { ids: {} })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "Vault", global: false })}
            [3] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 6
            [3] Reading substate: handle = 6, size = 0
            [3] Dropping lock: handle = 6 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 7
            [3] Reading substate: handle = 7, size = 0
            [3] Dropping lock: handle = 7 
            [3] Returning nodes: [Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000")]
            [3] Returning refs: {}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 8
            [3] Writing substate: handle = 8, size = 0
            [3] Dropping lock: handle = 8 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "put")), input size = 39
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 21
        [2] Reading substate: handle = 21, size = 0
        [2] Dropping lock: handle = 21 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 22
        [2] Reading substate: handle = 22, size = 0
        [2] Dropping lock: handle = 22 
        [2] Sending nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000")]
        [2] Sending refs: {Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 23
        [2] Writing substate: handle = 23, size = 0
        [2] Dropping lock: handle = 23 
        [2] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 24
        [2] Reading substate: handle = 24, size = 0
        [2] Dropping lock: handle = 24 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 25
        [2] Reading substate: handle = 25, size = 0
        [2] Dropping lock: handle = 25 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 26
        [2] Reading substate: handle = 26, size = 0
        [2] Dropping lock: handle = 26 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 27
        [2] Reading substate: handle = 27, size = 0
        [2] Dropping lock: handle = 27 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 28
        [2] Reading substate: handle = 28, size = 0
        [2] Dropping lock: handle = 28 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 29
        [2] Writing substate: handle = 29, size = 0
        [2] Dropping lock: handle = 29 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c02000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 5
            [3] Reading substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(LiquidFungible), flags = MUTABLE
            [3] Substate locked: handle = 6
            [3] Writing substate: handle = 6, size = 0
            [3] Dropping lock: handle = 6 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 7
            [3] Reading substate: handle = 7, size = 0
            [3] Dropping lock: handle = 7 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 8
            [3] Reading substate: handle = 8, size = 0
            [3] Dropping lock: handle = 8 
            [3] Returning nodes: []
            [3] Returning refs: {}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 9
            [3] Writing substate: handle = 9, size = 0
            [3] Dropping lock: handle = 9 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "get_resource_address")), input size = 23
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 30
        [2] Reading substate: handle = 30, size = 0
        [2] Dropping lock: handle = 30 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 31
        [2] Reading substate: handle = 31, size = 0
        [2] Dropping lock: handle = 31 
        [2] Sending nodes: []
        [2] Sending refs: {Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 32
        [2] Writing substate: handle = 32, size = 0
        [2] Dropping lock: handle = 32 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 33
        [2] Reading substate: handle = 33, size = 0
        [2] Dropping lock: handle = 33 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 34
        [2] Reading substate: handle = 34, size = 0
        [2] Dropping lock: handle = 34 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 35
        [2] Reading substate: handle = 35, size = 0
        [2] Dropping lock: handle = 35 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 36
        [2] Reading substate: handle = 36, size = 0
        [2] Dropping lock: handle = 36 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 37
        [2] Writing substate: handle = 37, size = 0
        [2] Dropping lock: handle = 37 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "get_resource_address")), input size = 23
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 38
        [2] Reading substate: handle = 38, size = 0
        [2] Dropping lock: handle = 38 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 39
        [2] Reading substate: handle = 39, size = 0
        [2] Dropping lock: handle = 39 
        [2] Sending nodes: []
        [2] Sending refs: {Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 40
        [2] Writing substate: handle = 40, size = 0
        [2] Dropping lock: handle = 40 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 41
        [2] Reading substate: handle = 41, size = 0
        [2] Dropping lock: handle = 41 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 42
        [2] Reading substate: handle = 42, size = 0
        [2] Dropping lock: handle = 42 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 43
        [2] Reading substate: handle = 43, size = 0
        [2] Dropping lock: handle = 43 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 44
        [2] Reading substate: handle = 44, size = 0
        [2] Dropping lock: handle = 44 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 45
        [2] Writing substate: handle = 45, size = 0
        [2] Dropping lock: handle = 45 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "get_resource_address")), input size = 23
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 46
        [2] Reading substate: handle = 46, size = 0
        [2] Dropping lock: handle = 46 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 47
        [2] Reading substate: handle = 47, size = 0
        [2] Dropping lock: handle = 47 
        [2] Sending nodes: []
        [2] Sending refs: {Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000")}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 48
        [2] Writing substate: handle = 48, size = 0
        [2] Dropping lock: handle = 48 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 49
        [2] Reading substate: handle = 49, size = 0
        [2] Dropping lock: handle = 49 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 50
        [2] Reading substate: handle = 50, size = 0
        [2] Dropping lock: handle = 50 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 51
        [2] Reading substate: handle = 51, size = 0
        [2] Dropping lock: handle = 51 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 52
        [2] Reading substate: handle = 52, size = 0
        [2] Dropping lock: handle = 52 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 53
        [2] Writing substate: handle = 53, size = 0
        [2] Dropping lock: handle = 53 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "get_resource_address")), input size = 23
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 54
        [2] Reading substate: handle = 54, size = 0
        [2] Dropping lock: handle = 54 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 55
        [2] Reading substate: handle = 55, size = 0
        [2] Dropping lock: handle = 55 
        [2] Sending nodes: []
        [2] Sending refs: {Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000")}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 56
        [2] Writing substate: handle = 56, size = 0
        [2] Dropping lock: handle = 56 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 57
        [2] Reading substate: handle = 57, size = 0
        [2] Dropping lock: handle = 57 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 58
        [2] Reading substate: handle = 58, size = 0
        [2] Dropping lock: handle = 58 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 59
        [2] Reading substate: handle = 59, size = 0
        [2] Dropping lock: handle = 59 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 60
        [2] Reading substate: handle = 60, size = 0
        [2] Dropping lock: handle = 60 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 61
        [2] Writing substate: handle = 61, size = 0
        [2] Dropping lock: handle = 61 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "get_resource_address")), input size = 23
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 62
        [2] Reading substate: handle = 62, size = 0
        [2] Dropping lock: handle = 62 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 63
        [2] Reading substate: handle = 63, size = 0
        [2] Dropping lock: handle = 63 
        [2] Sending nodes: []
        [2] Sending refs: {Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 64
        [2] Writing substate: handle = 64, size = 0
        [2] Dropping lock: handle = 64 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 65
        [2] Reading substate: handle = 65, size = 0
        [2] Dropping lock: handle = 65 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 66
        [2] Reading substate: handle = 66, size = 0
        [2] Dropping lock: handle = 66 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 67
        [2] Reading substate: handle = 67, size = 0
        [2] Dropping lock: handle = 67 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 68
        [2] Reading substate: handle = 68, size = 0
        [2] Dropping lock: handle = 68 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 69
        [2] Writing substate: handle = 69, size = 0
        [2] Dropping lock: handle = 69 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "NonFungibleResourceManager", ident: "create" }), input size = 393
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 70
        [2] Reading substate: handle = 70, size = 0
        [2] Dropping lock: handle = 70 
        [2] Sending nodes: []
        [2] Sending refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 71
        [2] Writing substate: handle = 71, size = 0
        [2] Dropping lock: handle = 71 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
        [2] Substate locked: handle = 72
        [2] Reading substate: handle = 72, size = 0
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 73
        [2] Reading substate: handle = 73, size = 0
        [2] Dropping lock: handle = 73 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 74
        [2] Writing substate: handle = 74, size = 0
        [2] Dropping lock: handle = 74 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Creating node: id = KeyValueStore("0f055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c08000000"), init = KeyValueStore, module_init = {TypeInfo: TypeInfo(KeyValueStore(KeyValueStoreSchema { schema: Schema { type_kinds: [Tuple { field_types: [WellKnown(10)] }, Enum { variants: {0: [], 1: [SchemaLocalIndex(0)]} }], type_metadata: [TypeMetadata { type_name: Some("DelegateBadge"), child_names: Some(NamedFields(["id"])) }, TypeMetadata { type_name: Some("Option"), child_names: Some(EnumVariants({0: TypeMetadata { type_name: Some("None"), child_names: None }, 1: TypeMetadata { type_name: Some("Some"), child_names: None }})) }], type_validations: [None, None] }, key: WellKnown(192), value: SchemaLocalIndex(1), can_own: false }))}
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c09000000"), init = Object({ResourceManager(ResourceManager): NonFungibleResourceManager(NonFungibleResourceManagerSubstate { resource_address: NonFungibleResource[028d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d], total_supply: 0, id_type: UUID, non_fungible_type_index: SchemaLocalIndex(0), non_fungible_table: [15, 5, 84, 20, 176, 225, 84, 192, 28, 63, 23, 53, 213, 204, 152, 158, 243, 93, 185, 181, 187, 46, 143, 127, 14, 98, 12, 8, 0, 0, 0], mutable_fields: {} })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "NonFungibleResourceManager", global: false })}
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", ident: "create" }), input size = 672
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 5
            [3] Reading substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
            [3] Sending nodes: []
            [3] Sending refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), Global(NormalPackage[00000000000000000000000000000000000000000000000000000c])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 6
            [3] Writing substate: handle = 6, size = 0
            [3] Dropping lock: handle = 6 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 7
            [3] Reading substate: handle = 7, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 8
            [3] Reading substate: handle = 8, size = 0
            [3] Dropping lock: handle = 8 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0a000000"), init = Object({AccessRules(AccessRules): MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "burn" }: AccessRule(Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))), MethodKey { node_module_id: SELF, ident: "create_bucket" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_vault" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_type" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_total_supply" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "mint" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "mint_uuid" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "set" }: AccessRule(DenyAll)}, grouped_auth: {"mint": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "burn" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_bucket" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_vault" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_type" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_total_supply" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint_uuid" }: DenyAll, MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: DenyAll, MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "set" }: DenyAll}, grouped_auth_mutability: {"mint": DenyAll}, default_auth_mutability: DenyAll } })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", global: false })}
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0a000000")]
                [4] Returning refs: {}
            [3] Exiting: output size = 0
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", ident: "create" }), input size = 964
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 9
            [3] Reading substate: handle = 9, size = 0
            [3] Dropping lock: handle = 9 
            [3] Sending nodes: []
            [3] Sending refs: {Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 10
            [3] Writing substate: handle = 10, size = 0
            [3] Dropping lock: handle = 10 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 11
            [3] Reading substate: handle = 11, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 12
            [3] Reading substate: handle = 12, size = 0
            [3] Dropping lock: handle = 12 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0b000000"), init = Object({AccessRules(AccessRules): MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_address" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "lock_fee" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "put" }: AccessRule(Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))), MethodKey { node_module_id: SELF, ident: "take" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: Group("withdraw"), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll)}, grouped_auth: {"recall": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])))), "withdraw": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_address" }: DenyAll, MethodKey { node_module_id: SELF, ident: "lock_fee" }: DenyAll, MethodKey { node_module_id: SELF, ident: "put" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll}, grouped_auth_mutability: {"recall": DenyAll, "withdraw": DenyAll}, default_auth_mutability: DenyAll } })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", global: false })}
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0b000000")]
                [4] Returning refs: {}
            [3] Exiting: output size = 0
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000a], blueprint_name: "Metadata", ident: "create_with_data" }), input size = 78
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 13
            [3] Reading substate: handle = 13, size = 0
            [3] Dropping lock: handle = 13 
            [3] Sending nodes: []
            [3] Sending refs: {Global(NormalPackage[00000000000000000000000000000000000000000000000000000a])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 14
            [3] Writing substate: handle = 14, size = 0
            [3] Dropping lock: handle = 14 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 15
            [3] Reading substate: handle = 15, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 16
            [3] Reading substate: handle = 16, size = 0
            [3] Dropping lock: handle = 16 
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 17
            [3] Writing substate: handle = 17, size = 0
            [3] Dropping lock: handle = 17 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0c000000"), init = Object({}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000a], blueprint_name: "Metadata", global: false })}
                [4] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0c000000"), module_id = SELF, offset = KeyValueStore(Entry([92, 12, 4, 110, 97, 109, 101])), flags = MUTABLE
                [4] Substate locked: handle = 5
                [4] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0c000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
                [4] Substate locked: handle = 6
                [4] Reading substate: handle = 6, size = 0
                [4] Dropping lock: handle = 6 
                [4] Writing substate: handle = 5, size = 0
                [4] Dropping lock: handle = 5 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 7
                [4] Reading substate: handle = 7, size = 0
                [4] Dropping lock: handle = 7 
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0c000000")]
                [4] Returning refs: {}
                [4] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
                [4] Substate locked: handle = 8
                [4] Writing substate: handle = 8, size = 0
                [4] Dropping lock: handle = 8 
            [3] Exiting: output size = 0
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000b], blueprint_name: "ComponentRoyalty", ident: "create" }), input size = 62
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 18
            [3] Reading substate: handle = 18, size = 0
            [3] Dropping lock: handle = 18 
            [3] Sending nodes: []
            [3] Sending refs: {Global(NormalPackage[00000000000000000000000000000000000000000000000000000b])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 19
            [3] Writing substate: handle = 19, size = 0
            [3] Dropping lock: handle = 19 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 20
            [3] Reading substate: handle = 20, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 21
            [3] Reading substate: handle = 21, size = 0
            [3] Dropping lock: handle = 21 
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 22
            [3] Writing substate: handle = 22, size = 0
            [3] Dropping lock: handle = 22 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0d000000"), init = Object({Royalty(RoyaltyConfig): ComponentRoyaltyConfig(ComponentRoyaltyConfigSubstate { royalty_config: RoyaltyConfig { rules: {}, default_rule: 0 } }), Royalty(RoyaltyAccumulator): ComponentRoyaltyAccumulator(ComponentRoyaltyAccumulatorSubstate { royalty_vault: None })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000b], blueprint_name: "ComponentRoyalty", global: false })}
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0d000000")]
                [4] Returning refs: {}
                [4] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
                [4] Substate locked: handle = 5
                [4] Writing substate: handle = 5, size = 0
                [4] Dropping lock: handle = 5 
            [3] Exiting: output size = 0
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c09000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c09000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 23
            [3] Reading substate: handle = 23, size = 0
            [3] Dropping lock: handle = 23 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0c000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 24
            [3] Reading substate: handle = 24, size = 0
            [3] Dropping lock: handle = 24 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0c000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0c000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 25
            [3] Reading substate: handle = 25, size = 0
            [3] Dropping lock: handle = 25 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0a000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 26
            [3] Reading substate: handle = 26, size = 0
            [3] Dropping lock: handle = 26 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0a000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0a000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 27
            [3] Reading substate: handle = 27, size = 0
            [3] Dropping lock: handle = 27 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0b000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 28
            [3] Reading substate: handle = 28, size = 0
            [3] Dropping lock: handle = 28 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0b000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0b000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 29
            [3] Reading substate: handle = 29, size = 0
            [3] Dropping lock: handle = 29 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0d000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 30
            [3] Reading substate: handle = 30, size = 0
            [3] Dropping lock: handle = 30 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0d000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0d000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 31
            [3] Reading substate: handle = 31, size = 0
            [3] Dropping lock: handle = 31 
            [3] Creating node: id = Global(NonFungibleResource[028d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), init = GlobalObject({ResourceManager(ResourceManager): NonFungibleResourceManager(NonFungibleResourceManagerSubstate { resource_address: NonFungibleResource[028d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d], total_supply: 0, id_type: UUID, non_fungible_type_index: SchemaLocalIndex(0), non_fungible_table: [15, 5, 84, 20, 176, 225, 84, 192, 28, 63, 23, 53, 213, 204, 152, 158, 243, 93, 185, 181, 187, 46, 143, 127, 14, 98, 12, 8, 0, 0, 0], mutable_fields: {} })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "NonFungibleResourceManager", global: true }), Metadata: Metadata({KeyValueStore(Entry([92, 12, 4, 110, 97, 109, 101])): KeyValueStoreEntry(Some(Enum { discriminator: 0, fields: [Enum { discriminator: 0, fields: [String { value: "EDAO POWER ZERO" }] }] }))}), AccessRules: MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "burn" }: AccessRule(Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))), MethodKey { node_module_id: SELF, ident: "create_bucket" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_vault" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_type" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_total_supply" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "mint" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "mint_uuid" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "set" }: AccessRule(DenyAll)}, grouped_auth: {"mint": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "burn" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_bucket" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_vault" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_type" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_total_supply" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint_uuid" }: DenyAll, MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: DenyAll, MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "set" }: DenyAll}, grouped_auth_mutability: {"mint": DenyAll}, default_auth_mutability: DenyAll } }), AccessRules1: MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_address" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "lock_fee" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "put" }: AccessRule(Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))), MethodKey { node_module_id: SELF, ident: "take" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: Group("withdraw"), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll)}, grouped_auth: {"recall": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])))), "withdraw": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_address" }: DenyAll, MethodKey { node_module_id: SELF, ident: "lock_fee" }: DenyAll, MethodKey { node_module_id: SELF, ident: "put" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll}, grouped_auth_mutability: {"recall": DenyAll, "withdraw": DenyAll}, default_auth_mutability: DenyAll } }), ComponentRoyalty: ComponentRoyalty(ComponentRoyaltyConfigSubstate { royalty_config: RoyaltyConfig { rules: {}, default_rule: 0 } }, ComponentRoyaltyAccumulatorSubstate { royalty_vault: None })}
            [3] Returning nodes: []
            [3] Returning refs: {Global(NonFungibleResource[028d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 32
            [3] Writing substate: handle = 32, size = 0
            [3] Dropping lock: handle = 32 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "get_resource_address")), input size = 23
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 75
        [2] Reading substate: handle = 75, size = 0
        [2] Dropping lock: handle = 75 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 76
        [2] Reading substate: handle = 76, size = 0
        [2] Dropping lock: handle = 76 
        [2] Sending nodes: []
        [2] Sending refs: {Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 77
        [2] Writing substate: handle = 77, size = 0
        [2] Dropping lock: handle = 77 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 78
        [2] Reading substate: handle = 78, size = 0
        [2] Dropping lock: handle = 78 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 79
        [2] Reading substate: handle = 79, size = 0
        [2] Dropping lock: handle = 79 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 80
        [2] Reading substate: handle = 80, size = 0
        [2] Dropping lock: handle = 80 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 81
        [2] Reading substate: handle = 81, size = 0
        [2] Dropping lock: handle = 81 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 82
        [2] Writing substate: handle = 82, size = 0
        [2] Dropping lock: handle = 82 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "get_resource_address")), input size = 23
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 83
        [2] Reading substate: handle = 83, size = 0
        [2] Dropping lock: handle = 83 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 84
        [2] Reading substate: handle = 84, size = 0
        [2] Dropping lock: handle = 84 
        [2] Sending nodes: []
        [2] Sending refs: {Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 85
        [2] Writing substate: handle = 85, size = 0
        [2] Dropping lock: handle = 85 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 86
        [2] Reading substate: handle = 86, size = 0
        [2] Dropping lock: handle = 86 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 87
        [2] Reading substate: handle = 87, size = 0
        [2] Dropping lock: handle = 87 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 88
        [2] Reading substate: handle = 88, size = 0
        [2] Dropping lock: handle = 88 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 89
        [2] Reading substate: handle = 89, size = 0
        [2] Dropping lock: handle = 89 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 90
        [2] Writing substate: handle = 90, size = 0
        [2] Dropping lock: handle = 90 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "get_resource_address")), input size = 23
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 91
        [2] Reading substate: handle = 91, size = 0
        [2] Dropping lock: handle = 91 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 92
        [2] Reading substate: handle = 92, size = 0
        [2] Dropping lock: handle = 92 
        [2] Sending nodes: []
        [2] Sending refs: {Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 93
        [2] Writing substate: handle = 93, size = 0
        [2] Dropping lock: handle = 93 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 94
        [2] Reading substate: handle = 94, size = 0
        [2] Dropping lock: handle = 94 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 95
        [2] Reading substate: handle = 95, size = 0
        [2] Dropping lock: handle = 95 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 96
        [2] Reading substate: handle = 96, size = 0
        [2] Dropping lock: handle = 96 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 97
        [2] Reading substate: handle = 97, size = 0
        [2] Dropping lock: handle = 97 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 98
        [2] Writing substate: handle = 98, size = 0
        [2] Dropping lock: handle = 98 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "get_resource_address")), input size = 23
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 99
        [2] Reading substate: handle = 99, size = 0
        [2] Dropping lock: handle = 99 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 100
        [2] Reading substate: handle = 100, size = 0
        [2] Dropping lock: handle = 100 
        [2] Sending nodes: []
        [2] Sending refs: {Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000")}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 101
        [2] Writing substate: handle = 101, size = 0
        [2] Dropping lock: handle = 101 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 102
        [2] Reading substate: handle = 102, size = 0
        [2] Dropping lock: handle = 102 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 103
        [2] Reading substate: handle = 103, size = 0
        [2] Dropping lock: handle = 103 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 104
        [2] Reading substate: handle = 104, size = 0
        [2] Dropping lock: handle = 104 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 105
        [2] Reading substate: handle = 105, size = 0
        [2] Dropping lock: handle = 105 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 106
        [2] Writing substate: handle = 106, size = 0
        [2] Dropping lock: handle = 106 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "get_resource_address")), input size = 23
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 107
        [2] Reading substate: handle = 107, size = 0
        [2] Dropping lock: handle = 107 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 108
        [2] Reading substate: handle = 108, size = 0
        [2] Dropping lock: handle = 108 
        [2] Sending nodes: []
        [2] Sending refs: {Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000")}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 109
        [2] Writing substate: handle = 109, size = 0
        [2] Dropping lock: handle = 109 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 110
        [2] Reading substate: handle = 110, size = 0
        [2] Dropping lock: handle = 110 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 111
        [2] Reading substate: handle = 111, size = 0
        [2] Dropping lock: handle = 111 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 112
        [2] Reading substate: handle = 112, size = 0
        [2] Dropping lock: handle = 112 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 113
        [2] Reading substate: handle = 113, size = 0
        [2] Dropping lock: handle = 113 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 114
        [2] Writing substate: handle = 114, size = 0
        [2] Dropping lock: handle = 114 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "NonFungibleResourceManager", ident: "create" }), input size = 343
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 115
        [2] Reading substate: handle = 115, size = 0
        [2] Dropping lock: handle = 115 
        [2] Sending nodes: []
        [2] Sending refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 116
        [2] Writing substate: handle = 116, size = 0
        [2] Dropping lock: handle = 116 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
        [2] Substate locked: handle = 117
        [2] Reading substate: handle = 117, size = 0
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 118
        [2] Reading substate: handle = 118, size = 0
        [2] Dropping lock: handle = 118 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 119
        [2] Writing substate: handle = 119, size = 0
        [2] Dropping lock: handle = 119 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Creating node: id = KeyValueStore("0f055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0e000000"), init = KeyValueStore, module_init = {TypeInfo: TypeInfo(KeyValueStore(KeyValueStoreSchema { schema: Schema { type_kinds: [Enum { variants: {0: [], 1: [WellKnown(66)]} }], type_metadata: [TypeMetadata { type_name: Some("Option"), child_names: Some(EnumVariants({0: TypeMetadata { type_name: Some("None"), child_names: None }, 1: TypeMetadata { type_name: Some("Some"), child_names: None }})) }], type_validations: [None] }, key: WellKnown(192), value: SchemaLocalIndex(0), can_own: false }))}
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0f000000"), init = Object({ResourceManager(ResourceManager): NonFungibleResourceManager(NonFungibleResourceManagerSubstate { resource_address: NonFungibleResource[0217ac195f6862109f99b231a6ada2c2f44fb8b77b54c2f818412d], total_supply: 0, id_type: UUID, non_fungible_type_index: WellKnown(66), non_fungible_table: [15, 5, 84, 20, 176, 225, 84, 192, 28, 63, 23, 53, 213, 204, 152, 158, 243, 93, 185, 181, 187, 46, 143, 127, 14, 98, 12, 14, 0, 0, 0], mutable_fields: {} })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "NonFungibleResourceManager", global: false })}
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", ident: "create" }), input size = 672
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 5
            [3] Reading substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
            [3] Sending nodes: []
            [3] Sending refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), Global(NormalPackage[00000000000000000000000000000000000000000000000000000c])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 6
            [3] Writing substate: handle = 6, size = 0
            [3] Dropping lock: handle = 6 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 7
            [3] Reading substate: handle = 7, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 8
            [3] Reading substate: handle = 8, size = 0
            [3] Dropping lock: handle = 8 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c10000000"), init = Object({AccessRules(AccessRules): MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "burn" }: AccessRule(Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))), MethodKey { node_module_id: SELF, ident: "create_bucket" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_vault" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_type" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_total_supply" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "mint" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "mint_uuid" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "set" }: AccessRule(DenyAll)}, grouped_auth: {"mint": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "burn" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_bucket" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_vault" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_type" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_total_supply" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint_uuid" }: DenyAll, MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: DenyAll, MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "set" }: DenyAll}, grouped_auth_mutability: {"mint": DenyAll}, default_auth_mutability: DenyAll } })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", global: false })}
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c10000000")]
                [4] Returning refs: {}
            [3] Exiting: output size = 0
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", ident: "create" }), input size = 964
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 9
            [3] Reading substate: handle = 9, size = 0
            [3] Dropping lock: handle = 9 
            [3] Sending nodes: []
            [3] Sending refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), Global(NormalPackage[00000000000000000000000000000000000000000000000000000c])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 10
            [3] Writing substate: handle = 10, size = 0
            [3] Dropping lock: handle = 10 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 11
            [3] Reading substate: handle = 11, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 12
            [3] Reading substate: handle = 12, size = 0
            [3] Dropping lock: handle = 12 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000c]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c11000000"), init = Object({AccessRules(AccessRules): MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_address" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "lock_fee" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "put" }: AccessRule(Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))), MethodKey { node_module_id: SELF, ident: "take" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: Group("withdraw"), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll)}, grouped_auth: {"recall": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])))), "withdraw": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_address" }: DenyAll, MethodKey { node_module_id: SELF, ident: "lock_fee" }: DenyAll, MethodKey { node_module_id: SELF, ident: "put" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll}, grouped_auth_mutability: {"recall": DenyAll, "withdraw": DenyAll}, default_auth_mutability: DenyAll } })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000c], blueprint_name: "AccessRules", global: false })}
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c11000000")]
                [4] Returning refs: {}
            [3] Exiting: output size = 0
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000a], blueprint_name: "Metadata", ident: "create_with_data" }), input size = 77
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 13
            [3] Reading substate: handle = 13, size = 0
            [3] Dropping lock: handle = 13 
            [3] Sending nodes: []
            [3] Sending refs: {Global(NormalPackage[00000000000000000000000000000000000000000000000000000a])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 14
            [3] Writing substate: handle = 14, size = 0
            [3] Dropping lock: handle = 14 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 15
            [3] Reading substate: handle = 15, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 16
            [3] Reading substate: handle = 16, size = 0
            [3] Dropping lock: handle = 16 
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 17
            [3] Writing substate: handle = 17, size = 0
            [3] Dropping lock: handle = 17 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c12000000"), init = Object({}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000a], blueprint_name: "Metadata", global: false })}
                [4] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c12000000"), module_id = SELF, offset = KeyValueStore(Entry([92, 12, 4, 110, 97, 109, 101])), flags = MUTABLE
                [4] Substate locked: handle = 5
                [4] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c12000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
                [4] Substate locked: handle = 6
                [4] Reading substate: handle = 6, size = 0
                [4] Dropping lock: handle = 6 
                [4] Writing substate: handle = 5, size = 0
                [4] Dropping lock: handle = 5 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000a]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 7
                [4] Reading substate: handle = 7, size = 0
                [4] Dropping lock: handle = 7 
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c12000000")]
                [4] Returning refs: {}
                [4] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
                [4] Substate locked: handle = 8
                [4] Writing substate: handle = 8, size = 0
                [4] Dropping lock: handle = 8 
            [3] Exiting: output size = 0
            [3] Invoking: fn = Function(FnIdentifier { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000b], blueprint_name: "ComponentRoyalty", ident: "create" }), input size = 62
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 18
            [3] Reading substate: handle = 18, size = 0
            [3] Dropping lock: handle = 18 
            [3] Sending nodes: []
            [3] Sending refs: {Global(NormalPackage[00000000000000000000000000000000000000000000000000000b])}
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
            [3] Substate locked: handle = 19
            [3] Writing substate: handle = 19, size = 0
            [3] Dropping lock: handle = 19 
            [3] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(FunctionAccessRules), flags = (empty)
            [3] Substate locked: handle = 20
            [3] Reading substate: handle = 20, size = 0
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
            [3] Substate locked: handle = 21
            [3] Reading substate: handle = 21, size = 0
            [3] Dropping lock: handle = 21 
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 22
            [3] Writing substate: handle = 22, size = 0
            [3] Dropping lock: handle = 22 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 0
                [4] Dropping lock: handle = 0 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 1
                [4] Reading substate: handle = 1, size = 0
                [4] Dropping lock: handle = 1 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(CodeType), flags = (empty)
                [4] Substate locked: handle = 2
                [4] Reading substate: handle = 2, size = 0
                [4] Dropping lock: handle = 2 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Code), flags = (empty)
                [4] Substate locked: handle = 3
                [4] Reading substate: handle = 3, size = 0
                [4] Dropping lock: handle = 3 
                [4] Locking substate: node id = Global(NormalPackage[00000000000000000000000000000000000000000000000000000b]), module_id = SELF, offset = Package(Info), flags = (empty)
                [4] Substate locked: handle = 4
                [4] Reading substate: handle = 4, size = 0
                [4] Dropping lock: handle = 4 
                [4] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c13000000"), init = Object({Royalty(RoyaltyConfig): ComponentRoyaltyConfig(ComponentRoyaltyConfigSubstate { royalty_config: RoyaltyConfig { rules: {}, default_rule: 0 } }), Royalty(RoyaltyAccumulator): ComponentRoyaltyAccumulator(ComponentRoyaltyAccumulatorSubstate { royalty_vault: None })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[00000000000000000000000000000000000000000000000000000b], blueprint_name: "ComponentRoyalty", global: false })}
                [4] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c13000000")]
                [4] Returning refs: {}
                [4] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
                [4] Substate locked: handle = 5
                [4] Writing substate: handle = 5, size = 0
                [4] Dropping lock: handle = 5 
            [3] Exiting: output size = 0
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0f000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0f000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 23
            [3] Reading substate: handle = 23, size = 0
            [3] Dropping lock: handle = 23 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c12000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 24
            [3] Reading substate: handle = 24, size = 0
            [3] Dropping lock: handle = 24 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c12000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c12000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 25
            [3] Reading substate: handle = 25, size = 0
            [3] Dropping lock: handle = 25 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c10000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 26
            [3] Reading substate: handle = 26, size = 0
            [3] Dropping lock: handle = 26 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c10000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c10000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 27
            [3] Reading substate: handle = 27, size = 0
            [3] Dropping lock: handle = 27 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c11000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 28
            [3] Reading substate: handle = 28, size = 0
            [3] Dropping lock: handle = 28 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c11000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c11000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 29
            [3] Reading substate: handle = 29, size = 0
            [3] Dropping lock: handle = 29 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c13000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 30
            [3] Reading substate: handle = 30, size = 0
            [3] Dropping lock: handle = 30 
            [3] Dropping node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c13000000")
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c13000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 31
            [3] Reading substate: handle = 31, size = 0
            [3] Dropping lock: handle = 31 
            [3] Creating node: id = Global(NonFungibleResource[0217ac195f6862109f99b231a6ada2c2f44fb8b77b54c2f818412d]), init = GlobalObject({ResourceManager(ResourceManager): NonFungibleResourceManager(NonFungibleResourceManagerSubstate { resource_address: NonFungibleResource[0217ac195f6862109f99b231a6ada2c2f44fb8b77b54c2f818412d], total_supply: 0, id_type: UUID, non_fungible_type_index: WellKnown(66), non_fungible_table: [15, 5, 84, 20, 176, 225, 84, 192, 28, 63, 23, 53, 213, 204, 152, 158, 243, 93, 185, 181, 187, 46, 143, 127, 14, 98, 12, 14, 0, 0, 0], mutable_fields: {} })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "NonFungibleResourceManager", global: true }), Metadata: Metadata({KeyValueStore(Entry([92, 12, 4, 110, 97, 109, 101])): KeyValueStoreEntry(Some(Enum { discriminator: 0, fields: [Enum { discriminator: 0, fields: [String { value: "EDAO POWER ONE" }] }] }))}), AccessRules: MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "burn" }: AccessRule(Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))), MethodKey { node_module_id: SELF, ident: "create_bucket" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_vault" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_type" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_total_supply" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "mint" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "mint_uuid" }: Group("mint"), MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll), MethodKey { node_module_id: Metadata, ident: "set" }: AccessRule(DenyAll)}, grouped_auth: {"mint": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "burn" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_bucket" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_vault" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_type" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_total_supply" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint" }: DenyAll, MethodKey { node_module_id: SELF, ident: "mint_uuid" }: DenyAll, MethodKey { node_module_id: SELF, ident: "non_fungible_exists" }: DenyAll, MethodKey { node_module_id: SELF, ident: "update_non_fungible_data" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "set" }: DenyAll}, grouped_auth_mutability: {"mint": DenyAll}, default_auth_mutability: DenyAll } }), AccessRules1: MethodAccessRules(MethodAccessRulesSubstate { access_rules: AccessRulesConfig { method_auth: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_amount" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "get_resource_address" }: AccessRule(AllowAll), MethodKey { node_module_id: SELF, ident: "lock_fee" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "put" }: AccessRule(Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))), MethodKey { node_module_id: SELF, ident: "take" }: Group("withdraw"), MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: Group("withdraw"), MethodKey { node_module_id: Metadata, ident: "get" }: AccessRule(AllowAll)}, grouped_auth: {"recall": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])))), "withdraw": Protected(ProofRule(Require(StaticResource(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]))))}, default_auth: DenyAll, method_auth_mutability: {MethodKey { node_module_id: SELF, ident: "Vault_lock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_lock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "Vault_unlock_non_fungibles" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "create_proof_by_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_amount" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_non_fungible_local_ids" }: DenyAll, MethodKey { node_module_id: SELF, ident: "get_resource_address" }: DenyAll, MethodKey { node_module_id: SELF, ident: "lock_fee" }: DenyAll, MethodKey { node_module_id: SELF, ident: "put" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take" }: DenyAll, MethodKey { node_module_id: SELF, ident: "take_non_fungibles" }: DenyAll, MethodKey { node_module_id: Metadata, ident: "get" }: DenyAll}, grouped_auth_mutability: {"recall": DenyAll, "withdraw": DenyAll}, default_auth_mutability: DenyAll } }), ComponentRoyalty: ComponentRoyalty(ComponentRoyaltyConfigSubstate { royalty_config: RoyaltyConfig { rules: {}, default_rule: 0 } }, ComponentRoyaltyAccumulatorSubstate { royalty_vault: None })}
            [3] Returning nodes: []
            [3] Returning refs: {Global(NonFungibleResource[0217ac195f6862109f99b231a6ada2c2f44fb8b77b54c2f818412d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 32
            [3] Writing substate: handle = 32, size = 0
            [3] Dropping lock: handle = 32 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), SELF, "create_proof")), input size = 15
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 120
        [2] Reading substate: handle = 120, size = 0
        [2] Dropping lock: handle = 120 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 121
        [2] Reading substate: handle = 121, size = 0
        [2] Dropping lock: handle = 121 
        [2] Sending nodes: []
        [2] Sending refs: {Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000")}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 122
        [2] Writing substate: handle = 122, size = 0
        [2] Dropping lock: handle = 122 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 123
        [2] Reading substate: handle = 123, size = 0
        [2] Dropping lock: handle = 123 
        [2] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
        [2] Substate locked: handle = 124
        [2] Reading substate: handle = 124, size = 0
        [2] Dropping lock: handle = 124 
        [2] Locking substate: node id = Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d]), module_id = AccessRules1, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 125
        [2] Reading substate: handle = 125, size = 0
        [2] Dropping lock: handle = 125 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 126
        [2] Reading substate: handle = 126, size = 0
        [2] Dropping lock: handle = 126 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 127
        [2] Writing substate: handle = 127, size = 0
        [2] Dropping lock: handle = 127 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(LiquidFungible), flags = (empty)
            [3] Substate locked: handle = 5
            [3] Reading substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(LockedFungible), flags = (empty)
            [3] Substate locked: handle = 6
            [3] Reading substate: handle = 6, size = 0
            [3] Dropping lock: handle = 6 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(LockedFungible), flags = MUTABLE
            [3] Substate locked: handle = 7
            [3] Writing substate: handle = 7, size = 0
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = SELF, offset = Vault(LiquidFungible), flags = MUTABLE
            [3] Substate locked: handle = 8
            [3] Writing substate: handle = 8, size = 0
            [3] Dropping lock: handle = 8 
            [3] Locking substate: node id = Object("0e055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c07000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 9
            [3] Reading substate: handle = 9, size = 0
            [3] Dropping lock: handle = 9 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 10
            [3] Reading substate: handle = 10, size = 0
            [3] Dropping lock: handle = 10 
            [3] Writing substate: handle = 7, size = 0
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 11
            [3] Reading substate: handle = 11, size = 0
            [3] Dropping lock: handle = 11 
            [3] Creating node: id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c14000000"), init = Object({Proof(Info): ProofInfo(ProofInfoSubstate { resource_address: FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d], resource_type: Fungible { divisibility: 18 }, restricted: false }), Proof(Fungible): FungibleProof(FungibleProof { total_locked: 1, evidence: {Vault([14, 5, 84, 20, 176, 225, 84, 192, 28, 63, 23, 53, 213, 204, 152, 158, 243, 93, 185, 181, 187, 46, 143, 127, 14, 98, 12, 7, 0, 0, 0]): 1} }), Proof(NonFungible): NonFungibleProof(NonFungibleProof { total_locked: {}, evidence: {} })}), module_init = {TypeInfo: TypeInfo(Object { package_address: NormalPackage[000000000000000000000000000000000000000000000000000001], blueprint_name: "Proof", global: false })}
            [3] Returning nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c14000000")]
            [3] Returning refs: {}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 12
            [3] Writing substate: handle = 12, size = 0
            [3] Dropping lock: handle = 12 
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(AuthZoneStack, SELF, "push")), input size = 40
        [2] Locking substate: node id = AuthZoneStack, module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 128
        [2] Reading substate: handle = 128, size = 0
        [2] Dropping lock: handle = 128 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000009]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 129
        [2] Reading substate: handle = 129, size = 0
        [2] Dropping lock: handle = 129 
        [2] Sending nodes: [Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c14000000")]
        [2] Sending refs: {AuthZoneStack, Global(NormalPackage[000000000000000000000000000000000000000000000000000009])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000009]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 130
        [2] Writing substate: handle = 130, size = 0
        [2] Dropping lock: handle = 130 
        [2] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c14000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 131
        [2] Reading substate: handle = 131, size = 0
        [2] Dropping lock: handle = 131 
        [2] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c14000000"), module_id = SELF, offset = Proof(Info), flags = MUTABLE
        [2] Substate locked: handle = 132
        [2] Writing substate: handle = 132, size = 0
        [2] Dropping lock: handle = 132 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000009]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000009]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000009]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000009]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 4
            [3] Writing substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {}
        [2] Exiting: output size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Global(NonFungibleResource[0217ac195f6862109f99b231a6ada2c2f44fb8b77b54c2f818412d]), SELF, "mint_uuid")), input size = 27
        [2] Locking substate: node id = Global(NonFungibleResource[0217ac195f6862109f99b231a6ada2c2f44fb8b77b54c2f818412d]), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 133
        [2] Reading substate: handle = 133, size = 0
        [2] Dropping lock: handle = 133 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 134
        [2] Reading substate: handle = 134, size = 0
        [2] Dropping lock: handle = 134 
        [2] Sending nodes: []
        [2] Sending refs: {Global(NonFungibleResource[0217ac195f6862109f99b231a6ada2c2f44fb8b77b54c2f818412d]), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 135
        [2] Writing substate: handle = 135, size = 0
        [2] Dropping lock: handle = 135 
        [2] Locking substate: node id = Global(NonFungibleResource[0217ac195f6862109f99b231a6ada2c2f44fb8b77b54c2f818412d]), module_id = AccessRules, offset = AccessRules(AccessRules), flags = (empty)
        [2] Substate locked: handle = 136
        [2] Reading substate: handle = 136, size = 0
        [2] Dropping lock: handle = 136 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 137
        [2] Reading substate: handle = 137, size = 0
        [2] Invoking: fn = Method(MethodIdentifier(Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c14000000"), SELF, "Proof_get_resource_address")), input size = 29
        [2] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c14000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 138
        [2] Reading substate: handle = 138, size = 0
        [2] Dropping lock: handle = 138 
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
        [2] Substate locked: handle = 139
        [2] Reading substate: handle = 139, size = 0
        [2] Dropping lock: handle = 139 
        [2] Sending nodes: []
        [2] Sending refs: {Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c14000000"), Global(NormalPackage[000000000000000000000000000000000000000000000000000001])}
        [2] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Royalty), flags = MUTABLE
        [2] Substate locked: handle = 140
        [2] Writing substate: handle = 140, size = 0
        [2] Dropping lock: handle = 140 
        [2] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c14000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
        [2] Substate locked: handle = 141
        [2] Reading substate: handle = 141, size = 0
        [2] Dropping lock: handle = 141 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = (empty)
        [2] Substate locked: handle = 142
        [2] Reading substate: handle = 142, size = 0
        [2] Dropping lock: handle = 142 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 143
        [2] Writing substate: handle = 143, size = 0
        [2] Dropping lock: handle = 143 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Object("0d055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c14000000"), module_id = SELF, offset = Proof(Info), flags = (empty)
            [3] Substate locked: handle = 4
            [3] Reading substate: handle = 4, size = 0
            [3] Dropping lock: handle = 4 
            [3] Returning nodes: []
            [3] Returning refs: {Global(FungibleResource[018d048098086604eedd3191301cd7b47c67bc33a6043f0c8cdd2d])}
            [3] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Writing substate: handle = 5, size = 0
            [3] Dropping lock: handle = 5 
        [2] Exiting: output size = 0
        [2] Dropping lock: handle = 137 
        [2] Locking substate: node id = AuthZoneStack, module_id = SELF, offset = AuthZoneStack(AuthZoneStack), flags = MUTABLE
        [2] Substate locked: handle = 144
        [2] Writing substate: handle = 144, size = 0
        [2] Dropping lock: handle = 144 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 0
            [3] Dropping lock: handle = 0 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Info), flags = (empty)
            [3] Substate locked: handle = 1
            [3] Reading substate: handle = 1, size = 0
            [3] Dropping lock: handle = 1 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(CodeType), flags = (empty)
            [3] Substate locked: handle = 2
            [3] Reading substate: handle = 2, size = 0
            [3] Dropping lock: handle = 2 
            [3] Locking substate: node id = Global(NormalPackage[000000000000000000000000000000000000000000000000000001]), module_id = SELF, offset = Package(Code), flags = (empty)
            [3] Substate locked: handle = 3
            [3] Reading substate: handle = 3, size = 0
            [3] Dropping lock: handle = 3 
            [3] Locking substate: node id = Global(NonFungibleResource[0217ac195f6862109f99b231a6ada2c2f44fb8b77b54c2f818412d]), module_id = SELF, offset = ResourceManager(ResourceManager), flags = MUTABLE
            [3] Substate locked: handle = 4
            [3] Writing substate: handle = 4, size = 0
            [3] Locking substate: node id = KeyValueStore("0f055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0e000000"), module_id = SELF, offset = KeyValueStore(Entry([92, 192, 3, 93, 185, 181, 187, 46, 143, 79, 14, 162, 12, 59, 239, 0, 0, 0, 0])), flags = MUTABLE
            [3] Substate locked: handle = 5
            [3] Locking substate: node id = KeyValueStore("0f055414b0e154c01c3f1735d5cc989ef35db9b5bb2e8f7f0e620c0e000000"), module_id = TypeInfo, offset = TypeInfo(TypeInfo), flags = (empty)
            [3] Substate locked: handle = 6
            [3] Reading substate: handle = 6, size = 0
            [3] Dropping lock: handle = 6 
---------------------------------Cost Analysis----------------------------------
CreateNode                    :      62500
DropLock                      :     229000
DropNode                      :      40000
Invoke                        :      83750
LockSubstate                  :     240000
ReadSubstate                  :     172190
RunNative                     :     205000
RunSystem                     :      20000
RunWasm                       :    1695475
TxBaseCost                    :      50000
TxPayloadCost                 :       1140
TxSignatureVerification       :     100000
WriteSubstate                 :      52000
----------------------------------Cost Totals-----------------------------------
Total Cost Units Consumed     :    2951055
Cost Unit Limit               :  100000000
Execution XRD                 :  0.2951055
Royalty XRD                   :          0
--------------------------------Application Logs--------------------------------
-------------------------------------Finish-------------------------------------
Transaction Status: COMMITTED FAILURE: SystemError(InvalidSubstateWrite)
Transaction Fee: 0.2951055 XRD used for execution, 0 XRD used for royalty, 0 XRD in bad debt
Cost Units: 100000000 limit, 2951055 consumed, 0.0000001 XRD per cost unit, 0% tip
Logs: 0
Events: 0
Balance Changes: 0
Direct Vault Updates: 1
└─ Vault: 0e81e47a19e6b29b0a65b9591762ce5143ed30d0261e5d24a320172d000000, Address: resource_sim1qyqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqs6d89k, Delta: -0.2951055
New Entities: 0
